// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UrbanIndicatorsSystem.Data;

#nullable disable

namespace _.Migrations
{
    [DbContext(typeof(TrafficDbContext))]
    [Migration("20251025154637_UpdateTrafficSeed")]
    partial class UpdateTrafficSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UrbanIndicatorsSystem.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Shevchenkivskyi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pecherskyi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Podilskyi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Darnytskyi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Holosiivskyi"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Solomianskyi"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Dniprovskiy"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Obolonskyi"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Sviatoshynskyi"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Desnianskyi"
                        });
                });

            modelBuilder.Entity("UrbanIndicatorsSystem.Models.TrafficData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("integer");

                    b.Property<string>("RoadName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TrafficLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("TrafficData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaId = 1,
                            RoadName = "Shevchenkivskyi",
                            Timestamp = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            TrafficLevel = "Low"
                        },
                        new
                        {
                            Id = 2,
                            AreaId = 2,
                            RoadName = "Pecherskyi",
                            Timestamp = new DateTime(2025, 1, 1, 12, 5, 0, 0, DateTimeKind.Utc),
                            TrafficLevel = "Moderate"
                        },
                        new
                        {
                            Id = 3,
                            AreaId = 3,
                            RoadName = "Podilskyi",
                            Timestamp = new DateTime(2025, 1, 1, 12, 10, 0, 0, DateTimeKind.Utc),
                            TrafficLevel = "High"
                        },
                        new
                        {
                            Id = 4,
                            AreaId = 4,
                            RoadName = "Darnytskyi",
                            Timestamp = new DateTime(2025, 1, 1, 12, 15, 0, 0, DateTimeKind.Utc),
                            TrafficLevel = "Medium"
                        },
                        new
                        {
                            Id = 5,
                            AreaId = 5,
                            RoadName = "Holosiivskyi",
                            Timestamp = new DateTime(2025, 1, 1, 12, 20, 0, 0, DateTimeKind.Utc),
                            TrafficLevel = "Comfortable"
                        },
                        new
                        {
                            Id = 6,
                            AreaId = 6,
                            RoadName = "Solomianskyi",
                            Timestamp = new DateTime(2025, 1, 1, 12, 25, 0, 0, DateTimeKind.Utc),
                            TrafficLevel = "Moderate"
                        },
                        new
                        {
                            Id = 7,
                            AreaId = 7,
                            RoadName = "Dniprovskiy",
                            Timestamp = new DateTime(2025, 1, 1, 12, 30, 0, 0, DateTimeKind.Utc),
                            TrafficLevel = "High"
                        },
                        new
                        {
                            Id = 8,
                            AreaId = 8,
                            RoadName = "Obolonskyi",
                            Timestamp = new DateTime(2025, 1, 1, 12, 35, 0, 0, DateTimeKind.Utc),
                            TrafficLevel = "Medium"
                        },
                        new
                        {
                            Id = 9,
                            AreaId = 9,
                            RoadName = "Sviatoshynskyi",
                            Timestamp = new DateTime(2025, 1, 1, 12, 40, 0, 0, DateTimeKind.Utc),
                            TrafficLevel = "Comfortable"
                        },
                        new
                        {
                            Id = 10,
                            AreaId = 10,
                            RoadName = "Desnianskyi",
                            Timestamp = new DateTime(2025, 1, 1, 12, 45, 0, 0, DateTimeKind.Utc),
                            TrafficLevel = "Low"
                        });
                });

            modelBuilder.Entity("UrbanIndicatorsSystem.Models.TrafficData", b =>
                {
                    b.HasOne("UrbanIndicatorsSystem.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });
#pragma warning restore 612, 618
        }
    }
}
